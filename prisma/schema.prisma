// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  name          String           @db.VarChar(255)
  password      String
  role          String?          @db.VarChar(255)
  phone         String?          @db.VarChar(255)
  biography     String?
  avatar        String?
  sellerBalance BigInt           @default(0) @map("seller_balance")
  createdAt     DateTime         @default(now()) @map("created_at")
  experiences   UserExperience[]
  gigs          Gig[]
  reviews       GigReview[]

  @@map("users")
}

model UserExperience {
  id         Int    @id @default(autoincrement())
  experience String
  User       User   @relation(fields: [userId], references: [id])
  userId     Int    @map("user_id")

  @@map("user_experiences")
}

model Gig {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  duration      Int
  revisionLimit Int             @map("revision_limit")
  price         Int
  note          String?
  Seller        User            @relation(fields: [sellerId], references: [id])
  sellerId      Int             @map("seller_id")
  isActive      Int             @default(1) @map("is_active")
  slug          String
  createdAt     DateTime        @default(now()) @map("created_at")
  perks         GigPerk[]
  sellerPerks   GigSellerPerk[]
  taglines      GigTagline[]
  images        GigImage[]
  reviews       GigReview[]

  @@map("gigs")
}

model GigPerk {
  id    Int    @id @default(autoincrement())
  perk  String
  Gig   Gig    @relation(fields: [gigId], references: [id])
  gigId Int    @map("gig_id")

  @@map("gig_perks")
}

model GigSellerPerk {
  id    Int    @id @default(autoincrement())
  perk  String
  Gig   Gig    @relation(fields: [gigId], references: [id])
  gigId Int    @map("gig_id")

  @@map("gig_seller_perks")
}

model GigTagline {
  id      Int    @id @default(autoincrement())
  tagline String
  Gig     Gig    @relation(fields: [gigId], references: [id])
  gigId   Int    @map("gig_id")

  @@map("gig_taglines")
}

model GigImage {
  id    Int    @id @default(autoincrement())
  image String
  Gig   Gig    @relation(fields: [gigId], references: [id])
  gigId Int    @map("gig_id")

  @@map("gig_images")
}

model GigReview {
  id     Int    @id @default(autoincrement())
  rating Int
  review String
  Gig    Gig    @relation(fields: [gigId], references: [id])
  gigId  Int    @map("gig_id")
  User   User   @relation(fields: [userId], references: [id])
  userId Int    @map("user_id")

  @@map("gig_reviews")
}
